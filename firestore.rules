rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is owner of document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is in game
    function isPlayerInGame(gameId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid));
    }

    // Helper function to check if user is host of game
    function isGameHost(gameId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/games/$(gameId)).data.hostId == request.auth.uid;
    }

    // Users collection rules
    match /users/{userId} {
      // User can read/write their own profile
      allow create: if isOwner(userId);
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Games collection rules
    match /games/{gameId} {
      // Anyone authenticated can read public game data
      allow read: if isAuthenticated();
      
      // Only authenticated users can create games
      allow create: if isAuthenticated() && 
                     request.resource.data.hostId == request.auth.uid;
      
      // Only host can update game settings
      allow update: if (isGameHost(gameId) && 
                    resource.data.lobbyState == 'waiting') || 
                    isPlayerInGame(gameId);
      
      // Only host can delete game
      allow delete: if isGameHost(gameId);

      // Players subcollection rules
      match /players/{playerId} {
        // Players can see all player information when role revelation is active
        allow read: if isPlayerInGame(gameId) && 
                     (playerId == request.auth.uid ||
                      get(/databases/$(database)/documents/games/$(gameId)).data.gamePhase == 'setup' ||
                      get(/databases/$(database)/documents/games/$(gameId)).data.gamePhase == 'completed');
        
        // Players can only see their own secret role during game
        allow read: if isPlayerInGame(gameId) &&
                     playerId == request.auth.uid;
                     
        // Special rule: Fascists can see other fascists and Hitler
        allow read: if isPlayerInGame(gameId) &&
                     get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.role in ['fascist', 'hitler'] &&
                     get(/databases/$(database)/documents/games/$(gameId)/players/$(playerId)).data.role in ['fascist', 'hitler'];
                     
        // Allow players to join a game
        allow create: if isAuthenticated() && 
                       playerId == request.auth.uid &&
                       get(/databases/$(database)/documents/games/$(gameId)).data.lobbyState == 'waiting';
        
        // Allow players to update their own data
        allow update: if isPlayerInGame(gameId) &&
                       playerId == request.auth.uid;
      }

      // Policy deck subcollection (hidden from all players)
      match /policyDeck/{docId} {
        // Only the game system (server-side functions) should access the deck directly
        allow read, write: if false; // Will be managed by Cloud Functions
      }

      // Discard pile subcollection (visible to all players)
      match /discardPile/{docId} {
        allow read: if isPlayerInGame(gameId);
        allow write: if false; // Will be managed by Cloud Functions
      }

      // Chat subcollection
      match /chat/{messageId} {
        // All players in game can read and create chat messages
        allow read: if isPlayerInGame(gameId);
        allow create: if isPlayerInGame(gameId) &&
                       request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false; // Chat messages cannot be modified or deleted
      }
      
      // Votes subcollection (visible to all after voting completes)
      match /votes/{voteId} {
        allow read: if isPlayerInGame(gameId) &&
                    (voteId == request.auth.uid || 
                     get(/databases/$(database)/documents/games/$(gameId)).data.gamePhase != 'election');
        allow create, update: if isPlayerInGame(gameId) &&
                               voteId == request.auth.uid &&
                               get(/databases/$(database)/documents/games/$(gameId)).data.gamePhase == 'election';
        allow delete: if false;
      }
    }
  }
}
